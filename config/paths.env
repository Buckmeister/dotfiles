# ============================================================================
# Standard Installation Paths Configuration
# ============================================================================
#
# This file defines standard paths for installing tools and storing data.
# Follows XDG Base Directory specification where applicable.
#
# Sourced by post-install scripts and shared libraries
# ============================================================================

# ============================================================================
# XDG Base Directories
# ============================================================================

# Use XDG_CONFIG_HOME if set, otherwise default
export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"

# Use XDG_DATA_HOME if set, otherwise default
export XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"

# Use XDG_STATE_HOME if set, otherwise default
export XDG_STATE_HOME="${XDG_STATE_HOME:-$HOME/.local/state}"

# Use XDG_CACHE_HOME if set, otherwise default
export XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"

# ============================================================================
# Installation Directories
# ============================================================================

# User binaries
export INSTALL_BIN_DIR="$HOME/.local/bin"

# User libraries and frameworks
export INSTALL_LIB_DIR="$HOME/.local/lib"

# Shared data and resources
export INSTALL_SHARE_DIR="$HOME/.local/share"

# ============================================================================
# Language-Specific Directories
# ============================================================================

# Language servers installation directory
export LSP_INSTALL_DIR="$HOME/.local/lib/language-servers"

# Maven local repository
export MAVEN_HOME="$HOME/.local/lib/maven"

# Gradle installation directory
export GRADLE_HOME="$HOME/.local/lib/gradle"

# Python virtual environments
export PYTHON_VENV_DIR="$HOME/.local/lib/venvs"

# Node.js global packages (managed by npm)
export NPM_GLOBAL_DIR="$(npm config get prefix 2>/dev/null || echo "$HOME/.npm-global")"

# Rust cargo home
export CARGO_HOME="${CARGO_HOME:-$HOME/.cargo}"

# Go workspace
export GOPATH="${GOPATH:-$HOME/go}"

# Ruby gems home
export GEM_HOME="${GEM_HOME:-$HOME/.gem}"

# ============================================================================
# Cache and Temporary Directories
# ============================================================================

# Download cache for installers
export DOWNLOAD_CACHE_DIR="$XDG_CACHE_HOME/dotfiles-downloads"

# Temporary directory for installations
export DOWNLOAD_TEMP_DIR="${TMPDIR:-/tmp}/dotfiles-installers"

# Build cache
export BUILD_CACHE_DIR="$XDG_CACHE_HOME/dotfiles-builds"

# ============================================================================
# Data Directories
# ============================================================================

# Vim/Neovim data
export VIM_DATA_DIR="$XDG_DATA_HOME/nvim"

# Fonts directory
export FONTS_DIR="$HOME/.local/share/fonts"

# Themes directory
export THEMES_DIR="$XDG_DATA_HOME/themes"

# Icons directory
export ICONS_DIR="$XDG_DATA_HOME/icons"

# ============================================================================
# Backup Directories
# ============================================================================

# Backup directory for replaced configurations
export BACKUP_DIR="$HOME/.tmp/dotfilesBackup-$(date +%Y%m%d-%H%M%S)"

# Repository backups
export REPO_BACKUP_DIR="$HOME/Downloads/dotfiles_repo_backups"

# ============================================================================
# PATH Construction
# ============================================================================

# Ensure our bin directories are in PATH (scripts may source this file)
# Only add if not already present to avoid duplicates

# Add user bin directory
if [[ ":$PATH:" != *":$INSTALL_BIN_DIR:"* ]]; then
    export PATH="$INSTALL_BIN_DIR:$PATH"
fi

# Add cargo bin directory
if [[ ":$PATH:" != *":$CARGO_HOME/bin:"* ]] && [[ -d "$CARGO_HOME/bin" ]]; then
    export PATH="$CARGO_HOME/bin:$PATH"
fi

# Add go bin directory
if [[ ":$PATH:" != *":$GOPATH/bin:"* ]] && [[ -d "$GOPATH/bin" ]]; then
    export PATH="$GOPATH/bin:$PATH"
fi

# Add gem bin directory
if [[ ":$PATH:" != *":$GEM_HOME/bin:"* ]] && [[ -d "$GEM_HOME/bin" ]]; then
    export PATH="$GEM_HOME/bin:$PATH"
fi

# ============================================================================
# Directory Creation
# ============================================================================

# Ensure critical directories exist (run when this file is sourced)
# This is safe to run multiple times

mkdir -p "$INSTALL_BIN_DIR"
mkdir -p "$INSTALL_LIB_DIR"
mkdir -p "$INSTALL_SHARE_DIR"
mkdir -p "$LSP_INSTALL_DIR"
mkdir -p "$DOWNLOAD_CACHE_DIR"
mkdir -p "$DOWNLOAD_TEMP_DIR"
mkdir -p "$FONTS_DIR"

# ============================================================================
# Notes
# ============================================================================
#
# To override paths, you can:
# 1. Set environment variables before sourcing this file
# 2. Create config/personal.env with overrides (not tracked in git)
#
# Priority: Environment Variables > personal.env > paths.env
#

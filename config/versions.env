# ============================================================================
# Version Pins for Language Servers and Development Tools
# ============================================================================
#
# This file pins versions for tools that benefit from specific versions.
# Used by both post-install scripts AND the central update script (update_all.zsh)
#
# VERSION PINNING BEHAVIOR:
#   Empty values ("") = Use latest (will be updated by update_all.zsh)
#   Specific version  = Pinned version (update_all.zsh will skip with message)
#
# EXAMPLES:
#   RUST_VERSION=""              # Always update to latest
#   MAVEN_VERSION="3.9.6"        # Stay on specific version (known stable)
#   NODE_VERSION="20.11.0"       # Pin to LTS version
#
# PRIORITY ORDER (highest to lowest):
#   1. Environment Variables (export VERSION_NAME before running scripts)
#   2. config/personal.env (not tracked in git, for local overrides)
#   3. This file (versions.env, tracked in git)
#
# ============================================================================

# ============================================================================
# Language Servers
# ============================================================================

# TypeScript/JavaScript Language Server
TYPESCRIPT_LS_VERSION=""  # Use latest

# Python Language Server (pyright)
PYRIGHT_VERSION=""  # Use latest

# Rust Analyzer
RUST_ANALYZER_VERSION=""  # Use latest

# Lua Language Server
LUA_LS_VERSION=""  # Use latest

# Java Language Server (JDT.LS)
JDTLS_VERSION="latest"  # Special value for JDTLS

# C# Language Server (OmniSharp)
OMNISHARP_VERSION=""  # Use latest

# Bash Language Server
BASH_LS_VERSION=""  # Use latest

# YAML Language Server
YAML_LS_VERSION=""  # Use latest

# JSON Language Server
JSON_LS_VERSION=""  # Use latest

# HTML Language Server
HTML_LS_VERSION=""  # Use latest

# CSS Language Server
CSS_LS_VERSION=""  # Use latest

# ============================================================================
# Development Toolchains
# ============================================================================

# Node.js/npm
NODE_VERSION=""  # System package manager handles this

# Rust/cargo
RUST_VERSION=""  # System package manager handles this

# Python
PYTHON_VERSION=""  # System package manager handles this

# Ruby
RUBY_VERSION=""  # System package manager handles this

# Go
GO_VERSION=""  # System package manager handles this

# ============================================================================
# Build Tools
# ============================================================================

# Maven
MAVEN_VERSION="3.9.6"  # Known stable version

# Gradle
GRADLE_VERSION=""  # Use latest

# ============================================================================
# CLI Tools
# ============================================================================

# ripgrep
RIPGREP_VERSION=""  # Use latest

# fd
FD_VERSION=""  # Use latest

# bat
BAT_VERSION=""  # Use latest

# exa/eza
EZA_VERSION=""  # Use latest

# ============================================================================
# Fonts
# ============================================================================

# Nerd Fonts version
NERD_FONTS_VERSION="v3.1.1"  # Known stable version

# ============================================================================
# Notes and Usage Guide
# ============================================================================
#
# UPDATING TOOLS:
#   Use the central update script for streamlined updates:
#
#   ./bin/update_all.zsh                # Update everything (respects pins)
#   ./bin/update_all.zsh --system       # Update only system packages
#   ./bin/update_all.zsh --packages     # Update all language packages
#   ./bin/update_all.zsh --npm          # Update only npm packages
#   ./bin/update_all.zsh --dry-run      # Preview what would be updated
#
# VERSION PINNING STRATEGIES:
#
#   1. Pin Everything (maximum stability):
#      - Set specific versions for all tools
#      - Manual control over each update
#      - Best for production/critical systems
#
#   2. Pin Critical Only (recommended):
#      - Pin tools with breaking changes (Maven, specific LSPs)
#      - Let others auto-update ("")
#      - Balance of stability and freshness
#
#   3. Pin Nothing (bleeding edge):
#      - Set all to "" for latest versions
#      - Get newest features immediately
#      - May encounter occasional breakage
#
# OVERRIDING VERSIONS:
#
#   1. Edit this file (versions.env)
#      - Changes tracked in git
#      - Affects all machines using this repo
#
#   2. Create config/personal.env:
#      - Not tracked in git (machine-specific)
#      - Add: export MAVEN_VERSION="3.9.8"
#      - Overrides this file's settings
#
#   3. Set environment variable:
#      - Temporary, session-specific
#      - export RUST_VERSION="1.75.0" && ./post-install/scripts/toolchains.zsh
#      - Highest priority, overrides everything
#
# EXAMPLES OF COMMON PATTERNS:
#
#   # Stay on LTS versions
#   NODE_VERSION="20.11.1"  # Node.js LTS
#   PYTHON_VERSION="3.11"   # Python stable branch
#
#   # Pin tools with frequent breaking changes
#   MAVEN_VERSION="3.9.6"
#   GRADLE_VERSION="8.5"
#
#   # Always use latest (empty values)
#   RUST_VERSION=""
#   GO_VERSION=""
#   TYPESCRIPT_LS_VERSION=""
#
